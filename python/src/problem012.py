'''
Problem 12
08 March 2002

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

----------------------------------------------------------

Created on 28.01.2012

@author: ahallmann
'''
import unittest
import timeit

def factors(number):
    factors = []
    
    for i in range(1, number/2+1):
        if number % i == 0:
            factors.append(i)
            
    factors.append(number)
            
    return factors

def list_triangle_numbers(maximum):
    triangle_number = 1
    adding=2
    factors = 1
    
    # L(n) = L(n-1) + 3(n-1)
    
    while triangle_number < maximum:
        print str(triangle_number) + " / " + str(sum(range(1,adding))) \
                            + " @ " + str(count_factors(triangle_number)) + " / " + str(factors)
        triangle_number = triangle_number + adding
        factors = factors + 3*(adding-1)
        adding += 1
        

# by Lennart Wagner
def count_factors(n):
    if n == 1:
        return 1

    retval = 0
    max_m = n
    for m in xrange(1, n + 1):
        if m >= max_m:
            break

        if n % m == 0:
            retval += 2
            max_m = n / m
            if max_m == m:
                retval -= 1 # 2*2, 3*3, ...

    return retval        
        

def solve(factor_count):
    triangle_number = 1
    adding=2
    
    while True:
        cnt = count_factors(triangle_number)
        
        if cnt > factor_count:
            return triangle_number
        
        triangle_number = triangle_number + adding
        adding += 1 
        
         

class Test(unittest.TestCase):
    def testFactorsFunction(self):
        self.assertEqual([1], factors(1))
        self.assertEqual([1,3], factors(3))
        self.assertEqual([1,2,3,6], factors(6))
        self.assertEqual([1,2,5,10], factors(10))
        self.assertEqual([1,3,5,15], factors(15))
        self.assertEqual([1,3,7,21], factors(21))
        self.assertEqual([1,2,4,7,14,28], factors(28))
        
        self.assertEqual(1, count_factors(1))
        self.assertEqual(2, count_factors(3))
        self.assertEqual(4, count_factors(6))
        self.assertEqual(4, count_factors(10))
        self.assertEqual(4, count_factors(15))
        self.assertEqual(4, count_factors(21))
        self.assertEqual(6, count_factors(28))
        
        self.assertEqual(8, count_factors(42))        
    def testSample(self):
        self.assertEqual(28, solve(5))
    
    def testAnswer(self):
        self.assertEqual(76576500, solve(500))
       
        
# -----------------------------------------

def run():
    solve(500)


if __name__ == '__main__':
    unittest.main()

if __name__ == '__main__':
    t = timeit.Timer("run()", "from __main__ import run")
    count = 1
    print str(t.timeit(count)) + " seconds for " + str(count) + " runs"
    
    