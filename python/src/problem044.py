# coding=utf-8
'''
Problem 44
09 May 2003

Pentagonal numbers are generated by the formula, Pn=n(3nâˆ’1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
and D = |Pk âˆ’ Pj| is minimised; what is the value of D?
----------------------------------------------------------
Created on 30.01.2015

@author: ahallmann
'''
import unittest
import math
import timeit

from problem042 import generate_numbers
from problem042 import is_number


def pentagonal_numbers_at(n):
    return n * (3 * n - 1) / 2


def generate_pentagonal_numbers():
    return generate_numbers(pentagonal_numbers_at)


# def is_pentagonal_number(n):
#     return is_number(pentagonal_numbers_at, 'pentagonal', n)


def is_pentagonal_number(n):
    h = (math.sqrt(24*n+1)+1.0)/6.0
    return math.floor(h) == h


def pentagonal_numbers_upto(limit):
    i = 0
    lst = []
    for num in generate_pentagonal_numbers():
        lst.append(num)
        i += 1
        if i == limit:
            return lst


def solve(upto=3500):
    numbers = pentagonal_numbers_upto(upto)
    for i1 in range(0, upto):
        i1 = upto - i1
        for i2 in range(i1, upto - i1):
            a = numbers[i1]
            b = numbers[i2]
            if is_pentagonal_number(abs(a - b)) and is_pentagonal_number(a + b):
                return abs(a - b)


class Test(unittest.TestCase):
    def test_sample(self):
        self.assertEqual(22, pentagonal_numbers_at(4))
        self.assertEqual(70, pentagonal_numbers_at(7))
        self.assertEqual(92, pentagonal_numbers_at(8))

        self.assertTrue(is_pentagonal_number(92))
        pass

    def test_answer(self):
        self.assertTrue(is_pentagonal_number(1560090))
        self.assertTrue(is_pentagonal_number(7042750))
        self.assertTrue(is_pentagonal_number(7042750 + 1560090))
        self.assertTrue(is_pentagonal_number(7042750 - 1560090))
        self.assertEqual(5482660, solve())
        pass


# -----------------------------------------

def run():
    return solve()


if __name__ == '__main__':
    run()
    unittest.main()

# if __name__ == '__main__':
# t = timeit.Timer("run()", "from __main__ import run")
#     count = 1
#     print(str(t.timeit(count)) + " seconds for " + str(count) + " runs")
