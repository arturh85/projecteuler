# coding=utf-8
"""
Problem 61
16 January 2014

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including 
the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a 
different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, 
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
----------------------------------------------------------
Created on 22.02.2015

@author: ahallmann
"""
import unittest
import timeit
import string
import itertools
import math

from problem042 import generate_triangle_numbers
from problem042 import is_triangle_number
from problem044 import is_pentagonal_number
from problem045 import is_hexagonal_number
from problem035 import generate_rotations


def is_square_number(n):
    h = math.sqrt(n)
    return math.floor(h) == h


def is_heptagonal_number(n):
    h = (math.sqrt(40*n+9)+3.0)/10.0
    return math.floor(h) == h


def is_octagonal_number(n):
    h = (math.sqrt(3*n+1)+1.0)/3.0
    return math.floor(h) == h



def generate_cyclic_numbers(n):
    pass


tests = [
    # {'func': is_triangle_number},
    {'func': is_square_number},
    {'func': is_pentagonal_number},
    {'func': is_hexagonal_number},
    {'func': is_heptagonal_number},
    {'func': is_octagonal_number}
]


def triangle_numbers_between(min, max):
    lst = []
    for n in generate_triangle_numbers():
        if min <= n < max:
            lst.append(int(n))
        if n > max:
            return lst


def generate_cyclic(n, test_func):
    start = str(n)[2:4]
    for end in range(100):
        s = start + str(end)
        if len(s) != 4:
            continue
        i = int(s)
        if i == n:
            continue
        if test_func(i):
            yield i
            

def find_cyclic_numbers(n, test_funcs, numbers=[]):
    numbers.append(n)
    test_func = test_funcs.pop(0)
    for c in generate_cyclic(n, test_func):
        if c in numbers:
            continue
        if len(test_funcs) == 0:
            if str(c)[2:4] != str(numbers[0])[0:2]:
                continue
            new_list = numbers[:]
            new_list.append(c)
            return new_list
        else:
            new_list = numbers[:]
            new_test_funcs = test_funcs[:]
            lst = find_cyclic_numbers(c, new_test_funcs, new_list)
            if lst:
                return lst
    return None


def solve():
    for n in triangle_numbers_between(1000, 10000):
        for combination in itertools.permutations([
            is_square_number,
            is_pentagonal_number,
            is_hexagonal_number,
            is_heptagonal_number,
            is_octagonal_number
        ]):
            lst = find_cyclic_numbers(n, list(combination), [])
            if lst:
                return lst
        

class Test(unittest.TestCase):
    def test_sample(self):
        self.assertEqual([2882], list(generate_cyclic(8128, is_pentagonal_number)))
        self.assertEqual([8281], list(generate_cyclic(2882, is_square_number)))
        self.assertEqual([8128], list(generate_cyclic(8281, is_triangle_number)))
        self.assertEqual([8128, 2882, 8281], find_cyclic_numbers(8128, [
            is_pentagonal_number,
            is_square_number,
        ]))
        pass
    
    def test_answer(self):
        self.assertEqual(28684, sum([8256, 5625, 2512, 1281, 8128, 2882]))
        self.assertEqual([8256, 5625, 2512, 1281, 8128, 2882], solve())
        pass


# -----------------------------------------


def run():
    return solve()

if __name__ == '__main__':
    unittest.main()

# if __name__ == '__main__':
# t = timeit.Timer("run()", "from __main__ import run")
# count = 1
# print(str(t.timeit(count)) + " seconds for " + str(count) + " runs")
