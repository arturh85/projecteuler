'''
Problem 2
19 October 2001

Each new term in the Fibonacci sequence is generated by adding the 
previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.

----------------------------------------------------------
Created on 25.01.2012

@author: ahallmann
'''
import unittest
import timeit

def fibonacci_sequence(limit=0):
    a = 1
    yield a
    
    b = 1
    
    yield b
    i = 0
    
    while(limit == 0 or a + b < limit):
        i = a + b        
        a = b
        b = i
        
        yield i

'''
By considering the terms in the Fibonacci sequence whose values do not 
exceed four million, find the sum of the even-valued terms.
'''
        
def solve(limit=4000000):
    msum = 0

    for i in fibonacci_sequence(limit):
        if i % 2 == 0:
            msum += i

    return msum


class Test(unittest.TestCase):
    def testSample(self):
        self.assertEqual(44, solve(100))
        
    def testAnswer(self):
        self.assertEqual(4613732, solve())
        
        
# -----------------------------------------

def run():
    solve()

if __name__ == '__main__':
    unittest.main()

if __name__ == '__main__':
    t = timeit.Timer("run()", "from __main__ import run")
    count = 10000
    print str(t.timeit(count)) + " seconds for " + str(count) + " runs"
    
    